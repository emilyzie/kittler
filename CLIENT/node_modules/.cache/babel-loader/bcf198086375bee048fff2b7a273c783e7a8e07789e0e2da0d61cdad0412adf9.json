{"ast":null,"code":"// // ProfilePage.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useSupabaseClient } from '../utils/auth'; // Import the hook\n// import WatchlistPage from './WatchlistPage';\n// import FriendsBar from '../components/common/FriendsBar';\n// import FriendRequestsDropdown from '../components/common/FriendRequests';\n\n// const ProfilePage = () => {\n//   const navigate = useNavigate();\n//   const supabase = useSupabaseClient(); // Use the hook\n//   const [username, setUsername] = useState('Guest');\n//   const [loading, setLoading] = useState(true);\n//   const [userId, setUserId] = useState(null);\n//   const [toggle, setToggle] = useState(1);\n//   const [friends, setFriends] = useState([]);\n\n//   useEffect(() => {\n//     const fetchUserData = async () => {\n//       const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n//       if (userError || !user) {\n//         console.log(\"Cooked.\");\n//         navigate('/');\n//         return;\n//       }\n\n//       setUserId(user.id);\n\n//       const { data: profile, error: profileError } = await supabase\n//         .from('profiles')\n//         .select('username')\n//         .eq('user_id', user.id)\n//         .single();\n\n//       if (profileError) {\n//         console.error('Error fetching user data:', profileError.message);\n//         navigate('/');\n//       } else if (profile) {\n//         setUsername(profile.username);\n//       }\n\n//       setLoading(false);\n//     };\n\n//     const fetchFriends = async () => {\n//       if (!userId) return; // Only fetch if userId is available\n//       const { data, error } = await supabase\n//         .from('friends')\n//         .select(`\n//           friend_id,\n//           friend_profile:friend_id (username) // Adjusted for correct relationship fetching\n//         `)\n//         .eq('user_id', userId)\n//         .eq('status', 'accepted');\n\n//       if (error) {\n//         console.error('Error fetching friends:', error.message);\n//       } else {\n//         console.log('Fetched friends data:', data); // Logs successful data fetch.\n\n//         setFriends(data.map(friend => ({\n//           id: friend.friend_id,\n//           username: friend.friend_profile.username  // Assuming the returned data structure from the query\n//         })));\n//       }\n//     };\n\n//     fetchUserData();\n\n//     if (userId) fetchFriends(); // Fetch friends if userId is available\n//   }, [navigate, supabase, userId]);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const updateToggle = (id) => {\n//     setToggle(id);\n//   };\n\n//   const deleteFriend = async (deletedId) => {\n//     if (window.confirm(`Are you sure you want to delete this friend?`)) {\n//       const { error } = await supabase\n//         .from('friends')\n//         .delete()\n//         .or(`and(user_id.eq.${userId},friend_id.eq.${deletedId}),and(user_id.eq.${deletedId},friend_id.eq.${userId})`);\n\n//       if (error) {\n//         console.error('Error deleting friend:', error.message);\n//       } else {\n//         setFriends(currentFriends => currentFriends.filter(friend => friend.id !== deletedId));\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"w-screen h-screen flex flex-col items-center pt-10\">\n//       <div className=\"flex justify-end w-5/6\">\n//         <div className=\"tab-bar grid grid-col-1\">\n//           <span className=\"py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(1)}>Profile</span>\n//           <span className=\"py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(2)}>Lists</span>\n//           <span className=\"pl-4 py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(3)}>Friends</span>\n//         </div>\n//       </div>\n//       <div className={toggle === 1 ? \"w-5/6\" : \"hidden\"}>\n//         <h1 className=\"text-2xl mb-16 text-left\">profpic {username}</h1>\n//         <div className=\"mt-16 grid grid-cols-4\">\n//           <div className=\"border-2 m-4 rounded-full py-8 px-4 grid grid-cols-1\">\n//             <span>lists: </span>\n//             <span>{friends.length}</span>\n//           </div>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">to consume: </span>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">consuming: </span>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">consumed: </span>\n//         </div>\n//       </div>\n//       <div className={toggle === 2 ? \"w-screen\" : \"hidden\"}>\n//         <WatchlistPage />\n//       </div>\n//       <div className={toggle === 3 ? \"grid grid-cols-2\" : \"hidden\"}>\n//         <div className=\"h-screen border-r-2 flex flex-col items-center\">\n//           <div className=\"m-6\">requests</div>\n//           <div className=\"m-6\"><FriendsBar userId={userId} /></div>\n//           <FriendRequestsDropdown userId={userId} />\n//         </div>\n//         <div className=\"flex flex-col items-center\">\n//           <h2 className=\"p-2 my-4\">friends</h2>\n//           {friends.map(friend => (\n//             <div className=\"border-b flex justify-between w-3/4\" key={friend.id}>\n//               {friend.username}\n//               <button className=\"hover:underline\" onClick={() => deleteFriend(friend.id)}>remove</button>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProfilePage;","map":{"version":3,"names":[],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/pages/ProfilePage.js"],"sourcesContent":["// // ProfilePage.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useSupabaseClient } from '../utils/auth'; // Import the hook\n// import WatchlistPage from './WatchlistPage';\n// import FriendsBar from '../components/common/FriendsBar';\n// import FriendRequestsDropdown from '../components/common/FriendRequests';\n\n// const ProfilePage = () => {\n//   const navigate = useNavigate();\n//   const supabase = useSupabaseClient(); // Use the hook\n//   const [username, setUsername] = useState('Guest');\n//   const [loading, setLoading] = useState(true);\n//   const [userId, setUserId] = useState(null);\n//   const [toggle, setToggle] = useState(1);\n//   const [friends, setFriends] = useState([]);\n\n//   useEffect(() => {\n//     const fetchUserData = async () => {\n//       const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n//       if (userError || !user) {\n//         console.log(\"Cooked.\");\n//         navigate('/');\n//         return;\n//       }\n\n//       setUserId(user.id);\n\n//       const { data: profile, error: profileError } = await supabase\n//         .from('profiles')\n//         .select('username')\n//         .eq('user_id', user.id)\n//         .single();\n\n//       if (profileError) {\n//         console.error('Error fetching user data:', profileError.message);\n//         navigate('/');\n//       } else if (profile) {\n//         setUsername(profile.username);\n//       }\n\n//       setLoading(false);\n//     };\n\n//     const fetchFriends = async () => {\n//       if (!userId) return; // Only fetch if userId is available\n//       const { data, error } = await supabase\n//         .from('friends')\n//         .select(`\n//           friend_id,\n//           friend_profile:friend_id (username) // Adjusted for correct relationship fetching\n//         `)\n//         .eq('user_id', userId)\n//         .eq('status', 'accepted');\n\n//       if (error) {\n//         console.error('Error fetching friends:', error.message);\n//       } else {\n//         console.log('Fetched friends data:', data); // Logs successful data fetch.\n\n//         setFriends(data.map(friend => ({\n//           id: friend.friend_id,\n//           username: friend.friend_profile.username  // Assuming the returned data structure from the query\n//         })));\n//       }\n//     };\n\n//     fetchUserData();\n\n//     if (userId) fetchFriends(); // Fetch friends if userId is available\n//   }, [navigate, supabase, userId]);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const updateToggle = (id) => {\n//     setToggle(id);\n//   };\n\n//   const deleteFriend = async (deletedId) => {\n//     if (window.confirm(`Are you sure you want to delete this friend?`)) {\n//       const { error } = await supabase\n//         .from('friends')\n//         .delete()\n//         .or(`and(user_id.eq.${userId},friend_id.eq.${deletedId}),and(user_id.eq.${deletedId},friend_id.eq.${userId})`);\n\n//       if (error) {\n//         console.error('Error deleting friend:', error.message);\n//       } else {\n//         setFriends(currentFriends => currentFriends.filter(friend => friend.id !== deletedId));\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"w-screen h-screen flex flex-col items-center pt-10\">\n//       <div className=\"flex justify-end w-5/6\">\n//         <div className=\"tab-bar grid grid-col-1\">\n//           <span className=\"py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(1)}>Profile</span>\n//           <span className=\"py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(2)}>Lists</span>\n//           <span className=\"pl-4 py-1 cursor-pointer text-right border-b border-black\" onClick={() => updateToggle(3)}>Friends</span>\n//         </div>\n//       </div>\n//       <div className={toggle === 1 ? \"w-5/6\" : \"hidden\"}>\n//         <h1 className=\"text-2xl mb-16 text-left\">profpic {username}</h1>\n//         <div className=\"mt-16 grid grid-cols-4\">\n//           <div className=\"border-2 m-4 rounded-full py-8 px-4 grid grid-cols-1\">\n//             <span>lists: </span>\n//             <span>{friends.length}</span>\n//           </div>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">to consume: </span>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">consuming: </span>\n//           <span className=\"border-2 m-4 rounded-full py-8 px-4\">consumed: </span>\n//         </div>\n//       </div>\n//       <div className={toggle === 2 ? \"w-screen\" : \"hidden\"}>\n//         <WatchlistPage />\n//       </div>\n//       <div className={toggle === 3 ? \"grid grid-cols-2\" : \"hidden\"}>\n//         <div className=\"h-screen border-r-2 flex flex-col items-center\">\n//           <div className=\"m-6\">requests</div>\n//           <div className=\"m-6\"><FriendsBar userId={userId} /></div>\n//           <FriendRequestsDropdown userId={userId} />\n//         </div>\n//         <div className=\"flex flex-col items-center\">\n//           <h2 className=\"p-2 my-4\">friends</h2>\n//           {friends.map(friend => (\n//             <div className=\"border-b flex justify-between w-3/4\" key={friend.id}>\n//               {friend.username}\n//               <button className=\"hover:underline\" onClick={() => deleteFriend(friend.id)}>remove</button>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProfilePage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}