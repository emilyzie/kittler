{"ast":null,"code":"var _jsxFileName = \"/Users/midhu1/Projects/mediaconsumption/CLIENT/src/utils/auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { useSession } from '@clerk/clerk-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Context to hold the Supabase client and its loading state\nexport const SupabaseContext = /*#__PURE__*/createContext({\n  client: null,\n  isLoading: true\n});\nexport const SupabaseProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    session\n  } = useSession();\n  const [supabase, setSupabase] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // State to track loading of Supabase client\n\n  useEffect(() => {\n    if (session) {\n      setIsLoading(true); // Start loading\n      const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n        global: {\n          fetch: async (url, options = {}) => {\n            const clerkToken = await session.getToken({\n              template: 'supabase'\n            });\n            const headers = new Headers(options.headers);\n            headers.set('Authorization', `Bearer ${clerkToken}`);\n            return fetch(url, {\n              ...options,\n              headers\n            });\n          }\n        }\n      });\n      setSupabase(supabaseClient);\n      setIsLoading(false); // End loading\n    } else {\n      setSupabase(null);\n      setIsLoading(false);\n    }\n  }, [session]);\n  return /*#__PURE__*/_jsxDEV(SupabaseContext.Provider, {\n    value: {\n      client: supabase,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SupabaseProvider, \"KrGPgcotudrRpMCNVrpgyxiAXVU=\", false, function () {\n  return [useSession];\n});\n_c = SupabaseProvider;\nexport const useSupabaseClient = () => {\n  _s2();\n  const {\n    client,\n    isLoading\n  } = useContext(SupabaseContext);\n  if (isLoading) {\n    throw new Error(\"Supabase client is initializing. Please check loading state before using this hook.\");\n  }\n  if (!client) {\n    throw new Error(\"useSupabaseClient must be used within a SupabaseProvider and after it has fully initialized.\");\n  }\n  return client;\n};\n_s2(useSupabaseClient, \"dyTOh6tAHbz6+H2Ir+kt+B5KcTM=\");\nvar _c;\n$RefreshReg$(_c, \"SupabaseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","createClient","useSession","jsxDEV","_jsxDEV","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","SupabaseContext","client","isLoading","SupabaseProvider","children","_s","session","supabase","setSupabase","setIsLoading","supabaseClient","global","fetch","url","options","clerkToken","getToken","template","headers","Headers","set","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSupabaseClient","_s2","Error","$RefreshReg$"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/utils/auth.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { useSession } from '@clerk/clerk-react';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Context to hold the Supabase client and its loading state\nexport const SupabaseContext = createContext({ client: null, isLoading: true });\n\nexport const SupabaseProvider = ({ children }) => {\n  const { session } = useSession();\n  const [supabase, setSupabase] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // State to track loading of Supabase client\n\n  useEffect(() => {\n    if (session) {\n      setIsLoading(true); // Start loading\n      const supabaseClient = createClient(\n        supabaseUrl, supabaseAnonKey, {\n          global: {\n            fetch: async (url, options = {}) => {\n              const clerkToken = await session.getToken({ template: 'supabase' });\n              const headers = new Headers(options.headers);\n              headers.set('Authorization', `Bearer ${clerkToken}`);\n              return fetch(url, { ...options, headers });\n            }\n          }\n        }\n      );\n      setSupabase(supabaseClient);\n      setIsLoading(false); // End loading\n    } else {\n      setSupabase(null);\n      setIsLoading(false);\n    }\n  }, [session]);\n\n  return (\n    <SupabaseContext.Provider value={{ client: supabase, isLoading }}>\n      {children}\n    </SupabaseContext.Provider>\n  );\n};\n\nexport const useSupabaseClient = () => {\n  const { client, isLoading } = useContext(SupabaseContext);\n  if (isLoading) {\n    throw new Error(\"Supabase client is initializing. Please check loading state before using this hook.\");\n  }\n  if (!client) {\n    throw new Error(\"useSupabaseClient must be used within a SupabaseProvider and after it has fully initialized.\");\n  }\n  return client;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;;AAE/D;AACA,OAAO,MAAMC,eAAe,gBAAGd,aAAa,CAAC;EAAEe,MAAM,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAK,CAAC,CAAC;AAE/E,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM;IAAEC;EAAQ,CAAC,GAAGf,UAAU,CAAC,CAAC;EAChC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,SAAS,EAAEO,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElDD,SAAS,CAAC,MAAM;IACd,IAAIkB,OAAO,EAAE;MACXG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpB,MAAMC,cAAc,GAAGpB,YAAY,CACjCI,WAAW,EAAEI,eAAe,EAAE;QAC5Ba,MAAM,EAAE;UACNC,KAAK,EAAE,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;YAClC,MAAMC,UAAU,GAAG,MAAMT,OAAO,CAACU,QAAQ,CAAC;cAAEC,QAAQ,EAAE;YAAW,CAAC,CAAC;YACnE,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAACL,OAAO,CAACI,OAAO,CAAC;YAC5CA,OAAO,CAACE,GAAG,CAAC,eAAe,EAAG,UAASL,UAAW,EAAC,CAAC;YACpD,OAAOH,KAAK,CAACC,GAAG,EAAE;cAAE,GAAGC,OAAO;cAAEI;YAAQ,CAAC,CAAC;UAC5C;QACF;MACF,CACF,CAAC;MACDV,WAAW,CAACE,cAAc,CAAC;MAC3BD,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MACLD,WAAW,CAAC,IAAI,CAAC;MACjBC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAEb,oBACEb,OAAA,CAACO,eAAe,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAErB,MAAM,EAAEM,QAAQ;MAAEL;IAAU,CAAE;IAAAE,QAAA,EAC9DA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACrB,EAAA,CAjCWF,gBAAgB;EAAA,QACPZ,UAAU;AAAA;AAAAoC,EAAA,GADnBxB,gBAAgB;AAmC7B,OAAO,MAAMyB,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrC,MAAM;IAAE5B,MAAM;IAAEC;EAAU,CAAC,GAAGf,UAAU,CAACa,eAAe,CAAC;EACzD,IAAIE,SAAS,EAAE;IACb,MAAM,IAAI4B,KAAK,CAAC,qFAAqF,CAAC;EACxG;EACA,IAAI,CAAC7B,MAAM,EAAE;IACX,MAAM,IAAI6B,KAAK,CAAC,8FAA8F,CAAC;EACjH;EACA,OAAO7B,MAAM;AACf,CAAC;AAAC4B,GAAA,CATWD,iBAAiB;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}