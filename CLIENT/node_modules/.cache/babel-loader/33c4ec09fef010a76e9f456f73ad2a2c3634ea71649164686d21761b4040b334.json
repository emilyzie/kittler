{"ast":null,"code":"var _s = $RefreshSig$();\n// utils/auth.js\nimport { useSession } from '@clerk/clerk-react';\nimport { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nexport const useSupabaseClient = () => {\n  _s();\n  const {\n    session\n  } = useSession();\n  if (!session) {\n    throw new Error(\"useSupabaseClient must be used within a Clerk session.\");\n  }\n  const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    global: {\n      fetch: async (url, options = {}) => {\n        const clerkToken = await session.getToken({\n          template: 'supabase'\n        });\n        const headers = new Headers(options.headers);\n        headers.set('Authorization', `Bearer ${clerkToken}`);\n        return fetch(url, {\n          ...options,\n          headers\n        });\n      }\n    }\n  });\n  return supabase;\n};\n_s(useSupabaseClient, \"PbFIfGNjJVqsyKHphpRC4MhOn2w=\", false, function () {\n  return [useSession];\n});","map":{"version":3,"names":["useSession","createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","useSupabaseClient","_s","session","Error","supabase","global","fetch","url","options","clerkToken","getToken","template","headers","Headers","set"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/utils/auth.js"],"sourcesContent":["// utils/auth.js\nimport { useSession } from '@clerk/clerk-react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nexport const useSupabaseClient = () => {\n  const { session } = useSession();\n\n  if (!session) {\n    throw new Error(\"useSupabaseClient must be used within a Clerk session.\");\n  }\n\n  const supabase = createClient(\n    supabaseUrl,\n    supabaseAnonKey,\n    {\n      global: {\n        fetch: async (url, options = {}) => {\n          const clerkToken = await session.getToken({ template: 'supabase' });\n          const headers = new Headers(options.headers);\n          headers.set('Authorization', `Bearer ${clerkToken}`);\n          return fetch(url, { ...options, headers });\n        }\n      }\n    }\n  );\n\n  return supabase;\n};\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAQ,CAAC,GAAGV,UAAU,CAAC,CAAC;EAEhC,IAAI,CAACU,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,MAAMC,QAAQ,GAAGX,YAAY,CAC3BC,WAAW,EACXI,eAAe,EACf;IACEO,MAAM,EAAE;MACNC,KAAK,EAAE,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;QAClC,MAAMC,UAAU,GAAG,MAAMP,OAAO,CAACQ,QAAQ,CAAC;UAAEC,QAAQ,EAAE;QAAW,CAAC,CAAC;QACnE,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAACL,OAAO,CAACI,OAAO,CAAC;QAC5CA,OAAO,CAACE,GAAG,CAAC,eAAe,EAAG,UAASL,UAAW,EAAC,CAAC;QACpD,OAAOH,KAAK,CAACC,GAAG,EAAE;UAAE,GAAGC,OAAO;UAAEI;QAAQ,CAAC,CAAC;MAC5C;IACF;EACF,CACF,CAAC;EAED,OAAOR,QAAQ;AACjB,CAAC;AAACH,EAAA,CAvBWD,iBAAiB;EAAA,QACRR,UAAU;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}