{"ast":null,"code":"import { createClient } from \"@supabase/supabase-js\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nfunction createClerkSupabaseClient() {\n  if (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Supabase URL or Anon Key is missing!\");\n    return null;\n  }\n  const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    fetch: async (url, options = {}) => {\n      try {\n        const clerkToken = await window.Clerk.session.getToken({\n          template: \"supabase\"\n        });\n        const headers = new Headers(options.headers);\n        headers.set(\"Authorization\", `Bearer ${clerkToken}`);\n\n        // Modify options to include the new headers\n        const modifiedOptions = {\n          ...options,\n          headers\n        };\n        return fetch(url, modifiedOptions);\n      } catch (error) {\n        console.error(\"Error fetching Clerk token:\", error);\n        // Fall back to default fetch if Clerk token can't be retrieved\n        return fetch(url, options);\n      }\n    }\n  });\n  return supabase;\n}\nconst client = createClerkSupabaseClient();\nexport default client;","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","createClerkSupabaseClient","console","error","supabase","fetch","url","options","clerkToken","window","Clerk","session","getToken","template","headers","Headers","set","modifiedOptions","client"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/utils/supabaseClient.js"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nfunction createClerkSupabaseClient() {\n  if (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Supabase URL or Anon Key is missing!\");\n    return null;\n  }\n\n  const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    fetch: async (url, options = {}) => {\n      try {\n        const clerkToken = await window.Clerk.session.getToken({\n          template: \"supabase\",\n        });\n\n        const headers = new Headers(options.headers);\n        headers.set(\"Authorization\", `Bearer ${clerkToken}`);\n\n        // Modify options to include the new headers\n        const modifiedOptions = {\n          ...options,\n          headers,\n        };\n\n        return fetch(url, modifiedOptions);\n      } catch (error) {\n        console.error(\"Error fetching Clerk token:\", error);\n        // Fall back to default fetch if Clerk token can't be retrieved\n        return fetch(url, options);\n      }\n    },\n  });\n\n  return supabase;\n}\n\nconst client = createClerkSupabaseClient();\n\nexport default client;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,SAASC,yBAAyBA,CAAA,EAAG;EACnC,IAAI,CAACN,WAAW,IAAI,CAACI,eAAe,EAAE;IACpCG,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;IACrD,OAAO,IAAI;EACb;EAEA,MAAMC,QAAQ,GAAGV,YAAY,CAACC,WAAW,EAAEI,eAAe,EAAE;IAC1DM,KAAK,EAAE,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;MAClC,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC;UACrDC,QAAQ,EAAE;QACZ,CAAC,CAAC;QAEF,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAACR,OAAO,CAACO,OAAO,CAAC;QAC5CA,OAAO,CAACE,GAAG,CAAC,eAAe,EAAG,UAASR,UAAW,EAAC,CAAC;;QAEpD;QACA,MAAMS,eAAe,GAAG;UACtB,GAAGV,OAAO;UACVO;QACF,CAAC;QAED,OAAOT,KAAK,CAACC,GAAG,EAAEW,eAAe,CAAC;MACpC,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD;QACA,OAAOE,KAAK,CAACC,GAAG,EAAEC,OAAO,CAAC;MAC5B;IACF;EACF,CAAC,CAAC;EAEF,OAAOH,QAAQ;AACjB;AAEA,MAAMc,MAAM,GAAGjB,yBAAyB,CAAC,CAAC;AAE1C,eAAeiB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}